
//                            Copyright James P. McNellis 2011 - 2012.                            //
//                   Distributed under the Boost Software License, Version 1.0.                   //
//     (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)    //

import "inspectable.idl";
import "windows.foundation.idl";

#define COMPONENT_VERSION 1.0

namespace CxxReflect.Reflection {

    interface IConstant;
    interface IEvent;
    interface ILoader;
    interface IMethod;
    interface INamespace;
    interface IParameter;
    interface IProperty;
    interface IType;

    declare
    {
        interface Windows.Foundation.Collections.IIterable<IType*>;
        interface Windows.Foundation.Collections.IIterator<IType*>;
    }

    typedef Windows.Foundation.Collections.IIterable<IType*> ITypeIterable;
    typedef Windows.Foundation.Collections.IIterator<IType*> ITypeIterator;




    [uuid(8ef41924-0f42-42ed-9bc0-13a22888416f), version(COMPONENT_VERSION)]
    interface IConstant : IInspectable
    {
    }

    [uuid(f3dc17e3-6237-467d-991c-1d3e44d98e35), version(COMPONENT_VERSION)]
    interface IEvent : IInspectable
    {
    }



    

    /// Represents a loader:  the root of a reflection type universe
    ///
    /// The loader serves as the root of a reflection type universe:  it loads metadata files and
    /// owns all of the objects required to represent the type universe.  You (the creator of the
    /// loader) is responsible for keeping the loader alive as long as it is in use.  Objects
    /// returned from ILoader functions do not keep the loader alive.
    ///
    /// Windows Runtime applications run out of an app package, which is a sealed, non-extensible
    /// container.  This means that the set of types usable from a packaged application is static
    /// and does not change at runtime.  Therefore, a single loader is usually sufficient.  The
    /// Loader runtime class (defined later in this file) holds a global `PackageLoader` that loads
    /// metadata for the package.  This loader is created the first time it is accessed and exists
    /// until the packaged application terminates (i.e., a user of this global loader needs not
    /// concern himself with management of the lifetime of the loader).
    [uuid(d033f1e0-2149-45e8-a0cc-1a72b44a4e17), version(COMPONENT_VERSION)]
    interface ILoader : IInspectable
    {
        /// Finds the namespace with the given name
        ///
        /// The `namespaceName` must be a valid namespace name:  it must not be an empty string and
        /// must not contain characters that are not valid in a namespace name.  If the named
        /// namespace does not exist or does not contain any types, the return value may be one of
        /// two possible values:  (1) nullptr or (2) a Namespace object that contains no types.  The
        /// former will be returned if the namespace could not possibly exist in the app package
        /// given all of the available metadata files that are included in the package.  The latter
        /// will be returned if the named namespace could be a nested namespace of a namespace that
        /// does exist in the package.
        HRESULT FindNamespace([in] HSTRING namespaceName, [out] [retval] INamespace** value);

        /// Finds the type with the given name
        ///
        /// The name must denote a type definition and must be a namespace-qualified type name.  It
        /// cannot be a type specialization (e.g. a generic instance or an array type).  The name
        /// must not be an empty string and must not contain characters not allowed in a type name.
        ///
        /// If the named type does not exist in the package, nullptr is returned.  Otherwise, a type
        /// object representing the type is returned.
        HRESULT FindType([in] HSTRING fullName, [out] [retval] IType** value);

        HRESULT GetTypes([out] [retval] ITypeIterable** value);
    }





    [uuid(b39889ec-9df4-4886-8d9d-e30109b00c2c), version(COMPONENT_VERSION)]
    interface IMethod : IInspectable
    {
    }

    [uuid(6605a025-3585-400b-acec-d49772c0117a), version(COMPONENT_VERSION)]
    interface INamespace : IInspectable
    {
        [propget] HRESULT Name([out] [retval] HSTRING* value);
        [propget] HRESULT MetadataFile([out] [retval] HSTRING* value);
    }

    [uuid(cdf1a0ae-50af-4bf0-bc7e-843ba02b42d1), version(COMPONENT_VERSION)]
    interface IParameter : IInspectable
    {
    }

    [uuid(21f5efac-498f-43b8-a445-bd44bee753db), version(COMPONENT_VERSION)]
    interface IProperty : IInspectable
    {
    }

    [uuid(683ad176-51f2-487c-80bc-3d2705daff3f), version(COMPONENT_VERSION)]
    interface IType : IInspectable
    {
        [propget] HRESULT IsAbstract([out] [retval] boolean* value);
        [propget] HRESULT IsArray([out] [retval] boolean* value);
        [propget] HRESULT IsByRef([out] [retval] boolean* value);
        [propget] HRESULT IsClass([out] [retval] boolean* value);
        [propget] HRESULT IsEnum([out] [retval] boolean* value);
        [propget] HRESULT IsGenericParameter([out] [retval] boolean* value);
        [propget] HRESULT IsGenericType([out] [retval] boolean* value);
        [propget] HRESULT IsGenericTypeDefinition([out] [retval] boolean* value);
        [propget] HRESULT IsInterface([out] [retval] boolean* value);
        [propget] HRESULT IsPrimitive([out] [retval] boolean* value);
        [propget] HRESULT IsSealed([out] [retval] boolean* value);
        [propget] HRESULT IsValueType([out] [retval] boolean* value);

        [propget] HRESULT BaseType([out] [retval] IType** value);
        [propget] HRESULT DeclaringType([out] [retval] IType** value);
        [propget] HRESULT ElementType([out] [retval] IType** value);

        [propget] HRESULT Namespace([out] [retval] INamespace** value);
        
        [propget] HRESULT FullName([out] [retval] HSTRING* value);
        [propget] HRESULT Name([out] [retval] HSTRING* value);
    }





    //
    //
    // Package Loader and Supporting Functionality
    //
    //





    // Construction of a loader may take a few seconds, so we allow initialization to be performed
    // on a worker thread and provide a future that will give access to the result.
    declare
    {
        interface Windows.Foundation.IAsyncOperation<ILoader*>;
    }

    typedef Windows.Foundation.IAsyncOperation<ILoader*> LoaderFuture;





    /// Defines constants for the loader implementations included in CxxReflect
    ///
    /// These are simply well-defined constants so that strings do not need to be used to represent
    /// a particular loader implementation.  A "built-in" loader can always be instantiated via its
    /// type name as well.
    [version(COMPONENT_VERSION)]
    enum LoaderType
    {
        /// The native loader that uses the core CxxReflect libraries
        NativeLoader  = 0
    };

    typedef enum LoaderType LoaderType;





    /// Defines the interface for a loader factory
    ///
    /// A loader may perform nontrivial I/O when it is created:  for example, the CxxReflect native
    /// loader opens all of the WinMD files in the package graph to facilitate various queries that
    /// require the full graph to be available.  Therefore, we cannot directly instantiate a lodaer
    /// and we cannot use an activation factory to directly create the loader.
    ///
    /// Instead, a Windows Runtime component that defines a loader should define an activatable
    /// runtime class that implements this interface.  This interface allows creation to return a
    /// future so a caller can do other work while the loader realizes its construction.  The
    /// factory class that implements this interface must be activatable with no arguments (e.g.
    /// a call to RoActivateInstance must succeed).
    ///
    /// Note that clients of CxxReflect should not attempt to directly instantiate a factory and
    /// construct a loader.  Instead, a client should use the static methods of the `Loader` class,
    /// defined below in `ILoaderStatics`.  These simplify loader construction.
    [uuid(e1346a53-8b3c-4d96-9714-b4a6af837e33), version(COMPONENT_VERSION)]
    interface ILoaderFactory : IInspectable
    {
        /// Starts creation of a loader and returns a future via which the loader can be accessed
        ///
        /// The `argument` allows a loader to accept optional configuration when it is constructed.
        /// A loader factory must allow `argument` to be nullptr and callers should (by default)
        /// pass nullptr as the argument value.
        HRESULT CreateLoader([in] IInspectable* argument, [out] [retval] LoaderFuture** value);
    }





    /// Defines the static members of the Loader runtime class
    [uuid(5504b885-aae6-4b1d-8238-a421bbd9839d), version(COMPONENT_VERSION)]
    interface ILoaderStatics : IInspectable
    {
        [propget] HRESULT PackageLoader([out] [retval] LoaderFuture** value);

        [overload("CreateLoader")] [default_overload] HRESULT CreateLoader([in] LoaderType type, [out] [retval] LoaderFuture** value);
        [overload("CreateLoader")]                    HRESULT CreateLoaderWithTypeName([in] HSTRING typeName, [out] [retval] LoaderFuture** value);

        [overload("InitializePackageLoader")] [default_overload] HRESULT InitializePackageLoader([in] LoaderType type);
        [overload("InitializePackageLoader")]                    HRESULT InitializePackageLoaderWithTypeName([in] HSTRING typeName);
        [overload("InitializePackageLoader")]                    HRESULT InitializePackageLoaderWithLoader([in] ILoader* loader);
        [overload("InitializePackageLoader")]                    HRESULT InitializePackageLoaderWithLoaderFuture([in] LoaderFuture* loader);
    }





    /// The static `Loader` class that originates 
    ///
    /// Note that this type does not implement the `ILoader` interface and is not activatable. 
    /// It isn't actually a loader.  Instad, it offers functionality to create loaders and to
    /// store a global loader for the packaged app.  See the `ILoaderStatics` interface for a
    /// list of what can be done with this static class.
    [marshaling_behavior(agile)]
    [static(ILoaderStatics, COMPONENT_VERSION)]
    [threading(both)]
    [version(COMPONENT_VERSION)]
    runtimeclass Loader
    {
    }

}
