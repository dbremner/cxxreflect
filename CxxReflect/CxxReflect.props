<?xml version="1.0" encoding="utf-8"?>
<!--

//               Copyright James P. McNellis (james@jamesmcnellis.com) 2011 - 2012.               //
//                   Distributed under the Boost Software License, Version 1.0.                   //
//     (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)    //

-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  
  <!--
  Note:  The Visual C++ Standard Library implementation relies on ConcRT for its threading headers.
  ConcRT, in turn, is layout-dependent on /ZW, so we cannot mix /ZW object files with non-/ZW object
  files.  Thus, we have two sets of identical project configurations:  one with /ZW, the other
  without.
  -->

  <PropertyGroup>
    <!-- CxxReflectIsCxxReflectLibrary is set only for the CxxReflect library itself. -->
    <CxxReflectIsCxxReflectLibrary Condition="'$(MSBuildProjectName)' == 'CxxReflect'">true</CxxReflectIsCxxReflectLibrary>
    <CxxReflectIsCxxReflectLibrary Condition="'$(CxxReflectIsCxxReflectLibrary)' == ''">false</CxxReflectIsCxxReflectLibrary>
    
    <!-- Non-/ZW configurations are enabled for the CxxReflect library and all non-AppContainerApplication projects -->
    <CxxReflectIncludeNonZWConfigurations Condition="'$(CxxReflectIsCxxReflectLibrary)' == 'true' or '$(AppContainerApplication)' != 'true'">true</CxxReflectIncludeNonZWConfigurations>
    <CxxReflectIncludeNonZWConfigurations Condition="'$(CxxReflectIncludeNonZWConfigurations)' == ''">false</CxxReflectIncludeNonZWConfigurations>
  
    <!-- /ZW configurations are enabled for the CxxReflect library and all AppContainerApplication projects -->
    <CxxReflectIncludeZWConfigurations Condition="'$(CxxReflectIsCxxReflectLibrary)' == 'true' or '$(AppContainerApplication)' == 'true'">true</CxxReflectIncludeZWConfigurations>
    <CxxReflectIncludeZWConfigurations Condition="'$(CxxReflectIncludeZWConfigurations)' == ''">false</CxxReflectIncludeZWConfigurations>
  </PropertyGroup>

  <!-- Non-/ZW Project Configurations -->
  <ItemGroup Condition="'$(CxxReflectIncludeNonZWConfigurations)' == 'true'">
    <ProjectConfiguration Include="Debug|Win32">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>

  <!-- /ZW Project Configurations -->
  <ItemGroup Condition="'$(CxxReflectIncludeZWConfigurations)' == 'true'">
    <ProjectConfiguration Include="Debug(ZW)|Win32">
      <Configuration>Debug(ZW)</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug(ZW)|x64">
      <Configuration>Debug(ZW)</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release(ZW)|Win32">
      <Configuration>Release(ZW)</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release(ZW)|x64">
      <Configuration>Release(ZW)</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>

  <PropertyGroup>
    <CxxReflectIsZwEnabled Condition="$(Configuration.Contains('ZW'))">true</CxxReflectIsZwEnabled>
    <CxxReflectIsZwEnabled Condition="'$(CxxReflectIsZwEnabled)' == ''">false</CxxReflectIsZwEnabled>
  </PropertyGroup>

  <PropertyGroup>
    <MinimumVisualStudioVersion>11.0</MinimumVisualStudioVersion>
    <RootNamespace>$(MSBuildProjectName)</RootNamespace>
    <VCTargetsPath Condition="'$(VCTargetsPath11)' != '' and '$(VSVersion)' == '' and '$(VisualStudioVersion)' == ''">$(VCTargetsPath11)</VCTargetsPath>
  </PropertyGroup>

  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  
  <!--
  Early Configuration Options
  -->

  <PropertyGroup>
    <CodeAnalysisRuleSet>AllRules.ruleset</CodeAnalysisRuleSet>
    <PlatformToolset>v110</PlatformToolset>
  </PropertyGroup>

  <PropertyGroup Condition="$(Configuration.Contains('Debug'))">
    <LinkIncremental>true</LinkIncremental>
    <UseDebugLibraries>true</UseDebugLibraries>
  </PropertyGroup>

  <PropertyGroup Condition="$(Configuration.Contains('Release'))">
    <UseDebugLibraries>false</UseDebugLibraries>
    <WholeProgramOptimization>true</WholeProgramOptimization>
  </PropertyGroup>

  <ItemDefinitionGroup>
    <!--
    The BuildLog Path must be set after importing Microsoft.Cpp.Default.props but after importing
    Microsoft.Cpp.props.  If we include it too early, the Default.props will reset it back to its
    default.  If we include it too late, the build will already have created the log.
    -->
    <BuildLog>
      <Path>$(SolutionDir)Build\Intermediate\$(Platform)\$(Configuration)\$(MSBuildProjectName)\$(MsBuildProjectName).log</Path>
    </BuildLog>
  </ItemDefinitionGroup>

  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  
  <!--
  Late Configuration Options
  -->

  <PropertyGroup>
    <OutDir>$(SolutionDir)Build\Output\$(Platform)\$(Configuration)\$(MSBuildProjectName)\</OutDir>
    <IntDir>$(SolutionDir)Build\Intermediate\$(Platform)\$(Configuration)\$(MSBuildProjectName)\</IntDir>

    <CxxReflectOutDir>$(SolutionDir)Build\Output\$(Platform)\$(Configuration)\CxxReflect\</CxxReflectOutDir>
  </PropertyGroup>

  <ItemDefinitionGroup>
    <BuildLog>
      <Path>$(SolutionDir)Build\Intermediate\$(Platform)\$(Configuration)\$(MSBuildProjectName)\$(MsBuildProjectName).log</Path>
    </BuildLog>
    <ClCompile>
      <AdditionalIncludeDirectories>..\;$(IncludePath);$(SolutionDir);$(VCInstallDir)Include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <!--
      C4100 (unreferenced parameter) is emitted by various XAML-generated files and library headers
      C4512 (op= could not be generated) is a silly warning that we aren't interested in :-)
      C4702 (unreachable code) is hit in release builds by debug statements that are unreachable
      -->
      <DisableSpecificWarnings>4100;4512;4702</DisableSpecificWarnings>
      <ErrorReporting>None</ErrorReporting>
      <MinimalRebuild>false</MinimalRebuild>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <PreprocessorDefinitions>NOMINMAX;_CRT_SECURE_NO_WARNINGS;_UNICODE;UNICODE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <WarningLevel>Level4</WarningLevel>
    </ClCompile>
    <Link>
      <AdditionalDependencies>CxxReflect.lib;runtimeobject.lib;wintypes.lib;advapi32.lib;shlwapi.lib;%(AdditionalDependencies)</AdditionalDependencies>
      <AdditionalLibraryDirectories>$(CxxReflectOutDir);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <GenerateDebugInformation>true</GenerateDebugInformation>
    </Link>
  </ItemDefinitionGroup>

  <ItemDefinitionGroup Condition="$(Configuration.Contains('Debug'))">
    <ClCompile>
      <BrowseInformation>true</BrowseInformation>
      <Optimization>Disabled</Optimization>
    </ClCompile>
  </ItemDefinitionGroup>

  <ItemDefinitionGroup Condition="$(Configuration.Contains('Release'))">
    <ClCompile>
      <BrowseInformation>false</BrowseInformation>
      <FavorSizeOrSpeed>Speed</FavorSizeOrSpeed>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <InlineFunctionExpansion>AnySuitable</InlineFunctionExpansion>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <OmitFramePointers>true</OmitFramePointers>
      <Optimization>Full</Optimization>
    </ClCompile>
    <Link>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
    </Link>
  </ItemDefinitionGroup>
  
  <!--
  For /ZW, we need to add the paths to Windows.winmd and Platform.winmd to the Using directories. We
  also need to actually set the /ZW compiler flag, and for the Visual Studio 11 Beta we need to set
  the /force:allowzwobj flag on the Librarian (otherwise, it won't archive /ZW object files).
  -->

  <ItemDefinitionGroup Condition="'$(CxxReflectIsZwEnabled)' == 'true' and '$(CxxReflectIsCxxReflectLibrary)' == 'true'">
    <ClCompile>
      <AdditionalOptions>/ZW %(AdditionalOptions)</AdditionalOptions>
      <AdditionalUsingDirectories>"$(WindowsSdk80Path)Windows Metadata";"$(ProgramFiles)\Microsoft SDKs\Windows\v8.0\ExtensionSDKs\Microsoft.VCLibs\11.0\References\CommonConfiguration\neutral"</AdditionalUsingDirectories>
    </ClCompile>
    <Lib>
      <AdditionalOptions>/force:allowzwobj %(AdditionalOptions)</AdditionalOptions>
    </Lib>
  </ItemDefinitionGroup>
  
  <!-- All projects reference the core CxxReflect.lib project -->
  <ItemGroup Condition="'$(MSBuildProjectName)' != 'CxxReflect'">
    <ProjectReference Include="$(SolutionDir)CxxReflect\CxxReflect.vcxproj">
      <Project>{64dc7dff-d2e4-4086-be24-02f0b9d71128}</Project>
    </ProjectReference>
  </ItemGroup>

</Project>
