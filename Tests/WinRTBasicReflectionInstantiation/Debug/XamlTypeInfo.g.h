//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once

#include "pch.h"
#include <collection.h>
#include <regex>

namespace XamlTypeInfo
{
    namespace InfoProvider
    {
        ref class XamlTypeInfoProvider
        {
        public:
            XamlTypeInfoProvider()
            {
                _xamlTypes = ref new Platform::Collections::Map<Platform::String^, Windows::UI::Xaml::Markup::IXamlType^>(); 
                _xamlMembers = ref new Platform::Collections::Map<Platform::String^, Windows::UI::Xaml::Markup::IXamlMember^>(); 
            }

            Windows::UI::Xaml::Markup::IXamlType^ CreateXamlType(Platform::String^ typeName);
            Windows::UI::Xaml::Markup::IXamlMember^ CreateXamlMember(Platform::String^ longMemberName);

            Windows::UI::Xaml::Markup::IXamlType^ GetXamlTypeByName(Platform::String^ typeName)
            {
                if (typeName == nullptr || typeName->IsEmpty())
                {
                    return nullptr;
                }

                if (_xamlTypes->HasKey(typeName))
                {
                    return _xamlTypes->Lookup(typeName);
                }
                Windows::UI::Xaml::Markup::IXamlType^ xamlType = CreateXamlType(typeName);


                if (xamlType == nullptr)
                {
                    xamlType = CheckOtherMetadataProviders(typeName);
                }

                if (xamlType != nullptr)
                {
                    _xamlTypes->Insert(typeName, xamlType);
                }
                return xamlType;
            }

            Windows::UI::Xaml::Markup::IXamlMember^ GetMemberByLongName(Platform::String^ longMemberName)
            {
                if (longMemberName == nullptr || longMemberName->IsEmpty())
                {
                    return nullptr;
                }
                if (_xamlMembers->HasKey(longMemberName))
                {
                    return _xamlMembers->Lookup(longMemberName);
                }
                Windows::UI::Xaml::Markup::IXamlMember^ xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != nullptr)
                {
                    _xamlMembers->Insert(longMemberName, xamlMember);
                }
                return xamlMember;                
            }

        private:
            Platform::Collections::Map<Platform::String^, Windows::UI::Xaml::Markup::IXamlType^>^ _xamlTypes;
            Platform::Collections::Map<Platform::String^, Windows::UI::Xaml::Markup::IXamlMember^>^ _xamlMembers;

        private:
            Platform::Collections::Vector<Windows::UI::Xaml::Markup::IXamlMetadataProvider^>^ _otherProviders;
            property Platform::Collections::Vector<Windows::UI::Xaml::Markup::IXamlMetadataProvider^>^ OtherProviders
            {
                Platform::Collections::Vector<Windows::UI::Xaml::Markup::IXamlMetadataProvider^>^ get();
            }

            Windows::UI::Xaml::Markup::IXamlType^ CheckOtherMetadataProviders(Platform::String^ typeName);
        };

        ref class XamlSystemBaseType : public Windows::UI::Xaml::Markup::IXamlType
        {
        public:
            XamlSystemBaseType(Platform::String^ name)
            {
                _fullName = name;
            }

            virtual property Windows::UI::Xaml::Markup::IXamlType^ BaseType 
            {
                Windows::UI::Xaml::Markup::IXamlType^ get() { throw ref new Platform::NotImplementedException; return nullptr; }
            }

            virtual property Windows::UI::Xaml::Markup::IXamlMember^ ContentProperty 
            {
                Windows::UI::Xaml::Markup::IXamlMember^ get() { throw ref new Platform::NotImplementedException;  return nullptr; }
            }

            virtual property Platform::String^ FullName
            {
                Platform::String^ get() { return _fullName; }
            }

            virtual property Platform::String^ Name
            {
                Platform::String^ get() 
                {
                    const wchar_t *pc = wcsrchr(_fullName->Data(), '.');
                    if (pc == nullptr)
                    {
                        return _fullName;
                    }
                    return ref new Platform::String(pc);
                }
            }

            virtual property bool IsArray
            {
                bool get() { throw ref new Platform::NotImplementedException; return false; }
            }

            virtual property bool IsCollection
            {
                bool get() { throw ref new Platform::NotImplementedException; return false; }
            }

            virtual property bool IsConstructible
            {
                bool get() { throw ref new Platform::NotImplementedException; return false; }
            }

            virtual property bool IsDictionary
            {
                bool get() { throw ref new Platform::NotImplementedException; return false; }
            }

            virtual property bool IsMarkupExtension
            {
                bool get() { throw ref new Platform::NotImplementedException; return false; }
            }

            virtual property bool IsEnum
            {
                bool get() { throw ref new Platform::NotImplementedException; return false; }
            }

            virtual property bool IsSystemType
            {
                bool get() { throw ref new Platform::NotImplementedException; return false; }
            }

            virtual property bool IsBindable
            {
                bool get() { throw ref new Platform::NotImplementedException; return false; }
            }

            virtual property Windows::UI::Xaml::Markup::IXamlType^ ItemType
            {
                Windows::UI::Xaml::Markup::IXamlType^ get() { throw ref new Platform::NotImplementedException; return nullptr; }
            }

            virtual property Windows::UI::Xaml::Markup::IXamlType^ KeyType
            {
                Windows::UI::Xaml::Markup::IXamlType^ get() { throw ref new Platform::NotImplementedException; return nullptr; }
            }

            virtual property Windows::UI::Xaml::Interop::TypeName UnderlyingType
            {
                Windows::UI::Xaml::Interop::TypeName get() 
                { 
                    Windows::UI::Xaml::Interop::TypeName t; 

                    t.Name = _fullName; 
                    t.Kind = Windows::UI::Xaml::Interop::TypeKind::Primitive; 

                    return t; 
                }
            }

            virtual Platform::Object^ ActivateInstance() 
            { 
                throw ref new Platform::NotImplementedException; return nullptr; 
            }

            virtual Windows::UI::Xaml::Markup::IXamlMember^ GetMember(Platform::String^ name) 
            { 
                throw ref new Platform::NotImplementedException; return nullptr; 
            }

            virtual void AddToVector(Platform::Object^ instance, Platform::Object^ item) 
            { 
                throw ref new Platform::NotImplementedException; 
            }

            virtual void AddToMap(Platform::Object^ instance, Platform::Object^ key, Platform::Object^ item) 
            { 
                throw ref new Platform::NotImplementedException; 
            }

            virtual void RunInitializer() 
            { 
                throw ref new Platform::NotImplementedException; 
            }

            virtual Platform::Object^ CreateFromString(Platform::String^ input) 
            { 
                throw ref new Platform::NotImplementedException; 
            }

        private:
            Platform::String^ _fullName;
        };

        private delegate Platform::Object^ Activator();
        private delegate void AddToCollection(Platform::Object^ instance, Platform::Object^ item);
        private delegate void AddToDictionary(Platform::Object^ instance, Platform::Object^ key, Platform::Object^ item);

        ref class XamlUserType : public Windows::UI::Xaml::Markup::IXamlType
        {
        public:
            XamlUserType(XamlTypeInfoProvider^ provider, Platform::String^ fullName, Windows::UI::Xaml::Markup::IXamlType^ baseType)
            {
                _memberNames = nullptr;
                _enumValues = nullptr;

                _isArray = false;
                _isMarkupExtension = false;
                _isEnum = false;
                 _isBindable = false;

                _fullName = fullName;
                _provider = provider;
                _baseType = baseType;
            }

            // --- Interface methods ----

            virtual property Platform::String^ FullName
            {
                Platform::String^ get() { return _fullName; }
            }

            virtual property Platform::String^ Name
            {
                Platform::String^ get() 
                {
                    const wchar_t *pc = wcsrchr(_fullName->Data(), '.');
                    if (pc == nullptr)
                    {
                        return _fullName;
                    }
                    return ref new Platform::String(pc);
                }
            }

            virtual property Windows::UI::Xaml::Interop::TypeName UnderlyingType
            {
                Windows::UI::Xaml::Interop::TypeName get() 
                { 
                    Windows::UI::Xaml::Interop::TypeName t; 

                    t.Name = _fullName; 
                    t.Kind = Windows::UI::Xaml::Interop::TypeKind::Metadata; 

                    return t; 
                }
            }

            virtual property bool IsSystemType
            {
                bool get() { return true; }
            }

            virtual property Windows::UI::Xaml::Markup::IXamlType^ BaseType 
            { 
                Windows::UI::Xaml::Markup::IXamlType^ get() { return _baseType; } 
            }

            virtual property bool IsArray 
            { 
                bool get() { return _isArray; } 
            }

            virtual property bool IsCollection 
            { 
                bool get() { return CollectionAdd != nullptr; } 
            }

            virtual property bool IsConstructible 
            { 
                bool get() { return Activator != nullptr; } 
            }

            virtual property bool IsDictionary 
            { 
                bool get() { return DictionaryAdd != nullptr; } 
            }

            virtual property bool IsMarkupExtension 
            { 
                bool get() { return _isMarkupExtension; } 
            }

            virtual property bool IsEnum 
            { 
                bool get() { return _isEnum; } 
            }

            virtual property bool IsBindable
            { 
                bool get() { return _isBindable; } 
            }

            virtual property Windows::UI::Xaml::Markup::IXamlMember^ ContentProperty 
            { 
                Windows::UI::Xaml::Markup::IXamlMember^ get() { return _provider->GetMemberByLongName(_contentPropertyName); } 
            }

            virtual property Windows::UI::Xaml::Markup::IXamlType^ ItemType 
            { 
                Windows::UI::Xaml::Markup::IXamlType^ get() { return _provider->GetXamlTypeByName(_itemTypeName); } 
            }

            virtual property Windows::UI::Xaml::Markup::IXamlType^ KeyType 
            { 
                Windows::UI::Xaml::Markup::IXamlType^ get() { return _provider->GetXamlTypeByName(_keyTypeName); } 
            }

            virtual Windows::UI::Xaml::Markup::IXamlMember^ GetMember(Platform::String^ name) 
            {
                if (_memberNames == nullptr)
                {
                    return nullptr;
                }

                if (_memberNames->HasKey(name))
                {
                    return _provider->GetMemberByLongName(_memberNames->Lookup(name));
                }
                return nullptr;
            }

            virtual Platform::Object^ ActivateInstance() 
            {
                return Activator(); 
            }

            virtual void AddToMap(Platform::Object^ instance, Platform::Object^ key, Platform::Object^ item)  
            {
                DictionaryAdd(instance, key, item);
            }

            virtual void AddToVector(Platform::Object^ instance, Platform::Object^ item) 
            {
                CollectionAdd(instance, item);
            }

            virtual void RunInitializer() 
            { 
                // The C++ runtime will have already run all the Static Initializers at start up.
            }

            virtual Platform::Object^ CreateFromString(Platform::String^ input)
            {
                if (_enumValues != nullptr)
                {
                    bool found=false;

                    const std::wregex r(L"^\\s+|\\s*,\\s*|\\s+$");

                    unsigned int val = 0;

                    for (std::wcregex_token_iterator i(input->Begin(), input->End(), r, -1), end; i != end; ++i) 
                    {
                        const std::wcsub_match& sm = *i;

                        if( sm.length() == 0 )
                            continue;

                        Platform::String ^ lookup  = ref new Platform::String(sm.first, sm.length());

                        try
                        {
                            if( _enumValues->HasKey(lookup) )
                            {
                                const auto f = _enumValues->Lookup(lookup);
                                val |= safe_cast <int>(f);
                            }
                            else
                            {
                                val |= std::stoi(sm);
                            }
                            found=true;
                        }
                        catch (const std::invalid_argument& )
                        {
                            found = false;
							break;
                        }
                    }

                    if(found)
                        return val;
                }

                                throw ref new Platform::NullReferenceException();
            }

            // --- End of Interface methods

            property XamlTypeInfo::InfoProvider::Activator^ Activator;
            property XamlTypeInfo::InfoProvider::AddToCollection^ CollectionAdd;
            property XamlTypeInfo::InfoProvider::AddToDictionary^ DictionaryAdd;

            void SetContentPropertyName(Platform::String^ contentPropertyName)
            {
                _contentPropertyName = contentPropertyName;
            }

            void SetIsArray()
            {
                _isArray = true;
            }

            void SetIsMarkupExtension()
            {
                _isMarkupExtension = true;
            }

            void SetIsEnum()
            {
                _isEnum = true;
            }

            void SetIsBindable()
            {
                _isBindable = true;
            }

            void SetItemTypeName(Platform::String^ itemTypeName)
            {
                _itemTypeName = itemTypeName;
            }

            void SetKeyTypeName(Platform::String^ keyTypeName)
            {
                _keyTypeName = keyTypeName;
            }

            void AddMemberName(Platform::String^ shortName, Platform::String^ longName)
            {
                if(_memberNames == nullptr)
                {
                    _memberNames = ref new Platform::Collections::Map<Platform::String^,Platform::String^>();
                }
                _memberNames->Insert(shortName, longName);
            }

            void AddEnumValue(Platform::String^ name, Platform::Object^ value)
            {
                if(_enumValues == nullptr)
                {
                    _enumValues = ref new Platform::Collections::Map<Platform::String^,Platform::Object^>();
                }
                _enumValues->Insert(name, value);
            }

        private:
            XamlTypeInfoProvider^ _provider;
            Windows::UI::Xaml::Markup::IXamlType^ _baseType;
            bool _isArray;
            bool _isConstructible;
            bool _isDictionary;
            bool _isMarkupExtension;
            bool _isEnum;
            bool _isBindable;

            Platform::String^ _contentPropertyName;
            Platform::String^ _itemTypeName;
            Platform::String^ _keyTypeName;
            Platform::String^ _fullName;
            Platform::Collections::Map<Platform::String^, Platform::String^>^ _memberNames;
            Platform::Collections::Map<Platform::String^, Platform::Object^>^ _enumValues;
        };

        private delegate Platform::Object^ PropertyGetterDelegate(Platform::Object^ instance);
        private delegate void PropertySetterDelegate(Platform::Object^ instance, Platform::Object^ value);

        ref class XamlMember : public Windows::UI::Xaml::Markup::IXamlMember
        {
        public:
            XamlMember(XamlTypeInfoProvider^ provider, Platform::String^ name, Platform::String^ typeName)
            {
                _isAttachable = false;
                _isDependencyProperty = false;
                _isReadOnly = false;
                
                _name = name;
                _typeName = typeName;
                _provider = provider;
            }

            void SetIsAttachable() { _isAttachable = true; }
            virtual property bool IsAttachable 
            { 
                bool get() { return _isAttachable; } 
            }

            void SetIsDependencyProperty() { _isDependencyProperty = true; }
            virtual property bool IsDependencyProperty 
            { 
                bool get() { return _isDependencyProperty; } 
            }

            void SetIsReadOnly() { _isReadOnly = true; }
            virtual property bool IsReadOnly 
            { 
                bool get() { return _isReadOnly; } 
            }

            virtual property Platform::String^ Name 
            { 
                Platform::String^ get() { return _name; } 
            }

            virtual property Windows::UI::Xaml::Markup::IXamlType^ Type
            {
                Windows::UI::Xaml::Markup::IXamlType^ get() { return _provider->GetXamlTypeByName(_typeName); }
            }

            void SetTargetTypeName(Platform::String^ targetTypeName)
            {
                _targetTypeName = targetTypeName;
            }

            virtual property Windows::UI::Xaml::Markup::IXamlType^ TargetType
            {
                Windows::UI::Xaml::Markup::IXamlType^ get() { return _provider->GetXamlTypeByName(_targetTypeName); }
            }

            property XamlTypeInfo::InfoProvider::PropertyGetterDelegate^ Getter;
            virtual Platform::Object^ GetValue(Platform::Object^ instance)
            {
                if (Getter != nullptr)
                    return Getter(instance);
                else
                    throw ref new Platform::NullReferenceException();
            }

            property XamlTypeInfo::InfoProvider::PropertySetterDelegate^ Setter;
            virtual void SetValue(Platform::Object^ instance, Platform::Object^ value)
            {
                if (Setter != nullptr)
                    Setter(instance, value);
                else
                    throw ref new Platform::NullReferenceException();
            }

        private:
            bool _isAttachable;
            bool _isDependencyProperty;
            bool _isReadOnly; 
            Platform::String^ _name;
            Platform::String^ _targetTypeName;
            Platform::String^ _typeName;
            XamlTypeInfoProvider^ _provider;
        };
    }
}
