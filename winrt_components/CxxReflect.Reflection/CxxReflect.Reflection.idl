
//                            Copyright James P. McNellis 2011 - 2012.                            //
//                   Distributed under the Boost Software License, Version 1.0.                   //
//     (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)    //

import "inspectable.idl";
import "windows.foundation.idl";

#define COMPONENT_VERSION 1.0

namespace CxxReflect.Reflection {

    interface IConstant;
    interface IEvent;
    interface ILoader;
    interface IMethod;
    interface IParameter;
    interface IProperty;
    interface IType;





    [uuid(8ef41924-0f42-42ed-9bc0-13a22888416f), version(COMPONENT_VERSION)]
    interface IConstant : IInspectable
    {
    }

    [uuid(f3dc17e3-6237-467d-991c-1d3e44d98e35), version(COMPONENT_VERSION)]
    interface IEvent : IInspectable
    {
    }

    [uuid(d033f1e0-2149-45e8-a0cc-1a72b44a4e17), version(COMPONENT_VERSION)]
    interface ILoader : IInspectable
    {
        HRESULT FindType([in] HSTRING fullName, [out] [retval] IType** type);
    }

    [uuid(b39889ec-9df4-4886-8d9d-e30109b00c2c), version(COMPONENT_VERSION)]
    interface IMethod : IInspectable
    {
    }

    [uuid(cdf1a0ae-50af-4bf0-bc7e-843ba02b42d1), version(COMPONENT_VERSION)]
    interface IParameter : IInspectable
    {
    }

    [uuid(21f5efac-498f-43b8-a445-bd44bee753db), version(COMPONENT_VERSION)]
    interface IProperty : IInspectable
    {
    }

    [uuid(683ad176-51f2-487c-80bc-3d2705daff3f), version(COMPONENT_VERSION)]
    interface IType : IInspectable
    {
        [propget] HRESULT Name([out] [retval] HSTRING* value);
        [propget] HRESULT FullName([out] [retval] HSTRING* value);
    }





    // PACKAGE LOADER AND SUPPORT
    //
    // A Metro style application runs in a sealed app package, so the type universe is static and
    // unchanging.  Since there is not usually a need for multiple loader instances, we provide
    // a singleton for most use cases.

    // Construction of a loader may take a few seconds, so we allow initialization to be performed
    // on a worker thread and provide a future that will give access to the result.
    declare
    {
        interface Windows.Foundation.IAsyncOperation<ILoader*>;
    }

    typedef Windows.Foundation.IAsyncOperation<ILoader*> LoaderFuture;

    [version(COMPONENT_VERSION)]
    enum LoaderType
    {
        NativeLoader  = 0
    };

    typedef enum LoaderType LoaderType;

    [uuid(e1346a53-8b3c-4d96-9714-b4a6af837e33), version(COMPONENT_VERSION)]
    interface ILoaderFactory : IInspectable
    {
        HRESULT CreateLoader([in] IInspectable* argument, [out] [retval] LoaderFuture** value);
    }

    [uuid(5504b885-aae6-4b1d-8238-a421bbd9839d), version(COMPONENT_VERSION)]
    interface ILoaderStatics : IInspectable
    {
        [propget] HRESULT PackageLoader([out] [retval] LoaderFuture** value);

        [overload("CreateLoader")] [default_overload] HRESULT CreateLoader([in] LoaderType type, [out] [retval] LoaderFuture** value);
        [overload("CreateLoader")]                    HRESULT CreateLoaderWithTypeName([in] HSTRING typeName, [out] [retval] LoaderFuture** value);

        [overload("InitializePackageLoader")] [default_overload] HRESULT InitializePackageLoader([in] LoaderType type);
        [overload("InitializePackageLoader")]                    HRESULT InitializePackageLoaderWithTypeName([in] HSTRING typeName);
        [overload("InitializePackageLoader")]                    HRESULT InitializePackageLoaderWithLoader([in] ILoader* loader);
        [overload("InitializePackageLoader")]                    HRESULT InitializePackageLoaderWithLoaderFuture([in] LoaderFuture* loader);
    }

    [marshaling_behavior(agile)]
    [static(ILoaderStatics, COMPONENT_VERSION)]
    [threading(both)]
    [version(COMPONENT_VERSION)]
    runtimeclass Loader
    {
    }

}
